import { injectable, inject } from 'tsyringe';
import { IPostUseCase } from './interfaces/post.usecase.interface';
import { IPostRepository } from '../repository/interfaces/post.repository.interface';
import { Post } from '../models/post.model';

@injectable()
export class PostUseCase implements IPostUseCase {
  constructor(@inject('IPostRepository') private postRepository: IPostRepository) {}

  async getAllPosts(): Promise<Post[]> {
    return await this.postRepository.findAll();
  }

  async getPostById(id: string): Promise<Post | null> {
    return await this.postRepository.findById(id);
  }

  async getPostsByAuthor(authorId: string): Promise<Post[]> {
    return await this.postRepository.findByAuthorId(authorId);
  }

  async createPost(title: string, content: string, authorId: string): Promise<Post> {
    const newPost: Post = {
      id: '', // Will be generated by Prisma
      title,
      content,
      authorId,
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    return await this.postRepository.create(newPost);
  }

  async updatePost(id: string, updates: Partial<Post>): Promise<Post | null> {
    return await this.postRepository.update(id, updates);
  }

  async deletePost(id: string): Promise<boolean> {
    return await this.postRepository.delete(id);
  }
}